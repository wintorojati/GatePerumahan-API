// <auto-generated />
using System;
using LeafByte.Parking.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LeafByte.Parking.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LeafByte.Parking.API.Models.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CardType")
                        .HasColumnType("integer");

                    b.Property<string>("CardUid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VehicleNumber")
                        .HasColumnType("text");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CardUid")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.HasIndex("VehicleTypeId");

                    b.HasIndex("CardType", "Status", "SequenceNumber");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.CardHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid");

                    b.Property<string>("ChangesJson")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UserId");

                    b.HasIndex("CardId", "OccurredAt");

                    b.ToTable("CardHistories");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Type", "IpAddress", "Port")
                        .IsUnique();

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.EntryLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntryError")
                        .HasColumnType("text");

                    b.Property<int>("EntryGateId")
                        .HasColumnType("integer");

                    b.Property<bool>("EntrySuccess")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("EntryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExitError")
                        .HasColumnType("text");

                    b.Property<int?>("ExitGateId")
                        .HasColumnType("integer");

                    b.Property<bool?>("ExitSuccess")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ExitTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExitGateId");

                    b.HasIndex("CardId", "EntryTime");

                    b.HasIndex("EntryGateId", "EntryTime");

                    b.ToTable("EntryLogs");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.Gate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEntry")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Gates");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Block")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Block", "Number")
                        .IsUnique();

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<int?>("HouseId")
                        .HasColumnType("integer");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int?>("IdentityType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ResidentType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.HasIndex("IdentityType", "IdentityNumber")
                        .IsUnique()
                        .HasFilter("\"IdentityType\" IS NOT NULL AND \"IdentityNumber\" IS NOT NULL");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int?>("VisitorInfoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VisitorInfoId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.VisitorInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HostResidentId")
                        .HasColumnType("integer");

                    b.Property<string>("HostResidentName")
                        .HasColumnType("text");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("text");

                    b.Property<int?>("IdentityType")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VehicleNumber")
                        .HasColumnType("text");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("VisitEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VisitPurpose")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("VisitStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VisitorName")
                        .HasColumnType("text");

                    b.Property<string>("VisitorPhone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HostResidentId");

                    b.HasIndex("VehicleTypeId");

                    b.HasIndex("CardId", "Status")
                        .HasFilter("\"VisitEnd\" IS NULL AND \"Status\" = 0");

                    b.ToTable("VisitorInfos");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.Card", b =>
                {
                    b.HasOne("LeafByte.Parking.API.Models.Person", "Person")
                        .WithMany("Cards")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LeafByte.Parking.API.Models.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId");

                    b.Navigation("Person");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.CardHistory", b =>
                {
                    b.HasOne("LeafByte.Parking.API.Models.Card", "Card")
                        .WithMany("History")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeafByte.Parking.API.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LeafByte.Parking.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Card");

                    b.Navigation("Device");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.EntryLog", b =>
                {
                    b.HasOne("LeafByte.Parking.API.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeafByte.Parking.API.Models.Gate", "EntryGate")
                        .WithMany()
                        .HasForeignKey("EntryGateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LeafByte.Parking.API.Models.Gate", "ExitGate")
                        .WithMany()
                        .HasForeignKey("ExitGateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Card");

                    b.Navigation("EntryGate");

                    b.Navigation("ExitGate");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.Person", b =>
                {
                    b.HasOne("LeafByte.Parking.API.Models.House", "House")
                        .WithMany("Residents")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("House");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.Photo", b =>
                {
                    b.HasOne("LeafByte.Parking.API.Models.VisitorInfo", null)
                        .WithMany("Photos")
                        .HasForeignKey("VisitorInfoId");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.VisitorInfo", b =>
                {
                    b.HasOne("LeafByte.Parking.API.Models.Card", "Card")
                        .WithMany("Visits")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LeafByte.Parking.API.Models.Person", "HostResident")
                        .WithMany()
                        .HasForeignKey("HostResidentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LeafByte.Parking.API.Models.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Card");

                    b.Navigation("HostResident");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.Card", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.House", b =>
                {
                    b.Navigation("Residents");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.Person", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("LeafByte.Parking.API.Models.VisitorInfo", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
